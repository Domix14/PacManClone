#pragma once

#include <SFML/System/Vector2.hpp>

constexpr  std::size_t WINDOW_WIDTH = 630;
constexpr std::size_t WINDOW_HEIGHT = 840;

constexpr  std::size_t MAP_WIDTH = 690;
constexpr std::size_t MAP_HEIGHT = 810;
constexpr float BLOCK_WIDTH = 30.f;

enum MapType
{
	Move = 0,
	PowerUpPosition = 1,
	Teleport = 2,
	SlowDown = 3,
	GhostHouseEntrance = 4,
	GhostHouse = 5,
	Wall = 6
};

static inline sf::Vector2f getMapOffset()
{
	return sf::Vector2f{ -BLOCK_WIDTH, BLOCK_WIDTH };
}

constexpr std::size_t getMapMaxRowIndex()
{
	return static_cast<std::size_t>(MAP_HEIGHT / BLOCK_WIDTH) - 1;
}

constexpr std::size_t getMapMaxColumnIndex()
{
	return static_cast<std::size_t>(MAP_WIDTH / BLOCK_WIDTH) - 1;
}

constexpr int map[getMapMaxRowIndex() + 1][getMapMaxColumnIndex() + 1] ={
								{6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
								{6,6,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,6,6},
								{6,6,0,6,6,6,0,6,6,6,0,6,0,6,6,6,0,6,6,6,0,6,6},
								{6,6,1,6,6,6,0,6,6,6,0,6,0,6,6,6,0,6,6,6,1,6,6},
								{6,6,0,6,6,6,0,6,6,6,0,6,0,6,6,6,0,6,6,6,0,6,6},
								{6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6},
								{6,6,0,6,6,6,0,6,0,6,6,6,6,6,0,6,0,6,6,6,0,6,6},
								{6,6,0,6,6,6,0,6,0,6,6,6,6,6,0,6,0,6,6,6,0,6,6},
								{6,6,0,0,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,0,0,6,6},
								{6,6,6,6,6,6,0,6,6,6,0,6,0,6,6,6,0,6,6,6,6,6,6},
								{6,6,6,6,6,6,0,6,0,0,0,0,0,0,0,6,0,6,6,6,6,6,6},
								{6,6,6,6,6,6,0,6,0,6,6,4,6,6,0,6,0,6,6,6,6,6,6},
								{6,6,6,6,6,6,0,6,0,6,5,5,5,6,0,6,0,6,6,6,6,6,6},
								{2,3,3,3,3,3,0,0,0,6,5,5,5,6,0,0,0,3,3,3,3,3,2},
								{6,6,6,6,6,6,0,6,0,6,6,6,6,6,0,6,0,6,6,6,6,6,6},
								{6,6,6,6,6,6,0,6,0,0,0,0,0,0,0,6,0,6,6,6,6,6,6},
								{6,6,6,6,6,6,0,6,0,6,6,6,6,6,0,6,0,6,6,6,6,6,6},
								{6,6,6,6,6,6,0,6,0,6,6,6,6,6,0,6,0,6,6,6,6,6,6},
								{6,6,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,6,6},
								{6,6,0,6,6,6,0,6,6,6,0,6,0,6,6,6,0,6,6,6,0,6,6},
								{6,6,1,0,0,6,0,0,0,0,0,0,0,0,0,0,0,6,0,0,1,6,6},
								{6,6,6,6,0,6,0,6,0,6,6,6,6,6,0,6,0,6,0,6,6,6,6},
								{6,6,6,6,0,6,0,6,0,6,6,6,6,6,0,6,0,6,0,6,6,6,6},
								{6,6,0,0,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,0,0,6,6},
								{6,6,0,6,6,6,6,6,6,6,0,6,0,6,6,6,6,6,6,6,0,6,6},
								{6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6},
								{6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6}};
				